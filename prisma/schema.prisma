generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String?
  username          String?             @unique
  password          String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  sessions          Session[]
  accounts          Account[]
  results           Result[]            @relation("UserResults")
  songs             Song[]              @relation("UserSongs")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  user               User    @relation(fields: [userId], references: [id])
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
}

model SongsPreset {
  id          Int      @id @default(autoincrement())
  title       String   // Наприклад: "20 творів Шопена"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  songs       Song[]   @relation("PresetSongs")
}

model Song {
  id                Int      @id @default(autoincrement())
  filename          String
  composer          String
  collection        String
  compositionNumber String
  filePath          String
  userId            Int
  presetId          Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation("UserSongs", fields: [userId], references: [id])
  preset            SongsPreset?  @relation("PresetSongs", fields: [presetId], references: [id])
  results           Result[] @relation("SongResults")
}

model Result {
  id          Int      @id @default(autoincrement())
  score       Int
  userId      Int
  songId      Int
  completedAt DateTime @default(now())
  user        User     @relation("UserResults", fields: [userId], references: [id])
  song        Song     @relation("SongResults", fields: [songId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}
